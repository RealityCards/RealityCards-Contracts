{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x6dE7FeB05fb77c8d0e17c6bF20F457a22A482736",
    "txHash": "0xffb61512c27f6802964220eb52ddc9056099f61c47309c75e4e256806e241ad8"
  },
  "proxies": [
    {
      "address": "0xeD2FdDCC465256B94243525C2cC499FE6dBea08e",
      "txHash": "0x78721f6a06c6c4c088ffe3abd27bd00492e82cd2275c8485a6fffc9d49b4c269",
      "kind": "transparent"
    }
  ],
  "impls": {
    "2111c8daaead24acd084e76ec445a3170ebeaf5bcc838a4ffd0af4a7fe2abdea": {
      "address": "0xA3E122B4954b63978d4FeF1aA9e01C4d2Cd8fE42",
      "txHash": "0xa5ce28e2efd4abd007d33f8d4d01cf9a893f56ffb803a97efdcd8a6354eb394d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:42"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)309_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:64"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:232"
          },
          {
            "contract": "EIP712Base",
            "label": "domainSeperator",
            "type": "t_bytes32",
            "src": "../project:/contracts/lib/EIP712Base.sol:20"
          },
          {
            "contract": "EIP712Base",
            "label": "cachedChainId",
            "type": "t_uint256",
            "src": "../project:/contracts/lib/EIP712Base.sol:21"
          },
          {
            "contract": "EIP712Base",
            "label": "cachedName",
            "type": "t_string_storage",
            "src": "../project:/contracts/lib/EIP712Base.sol:22"
          },
          {
            "contract": "EIP712Base",
            "label": "cachedVersion",
            "type": "t_string_storage",
            "src": "../project:/contracts/lib/EIP712Base.sol:23"
          },
          {
            "contract": "NativeMetaTransaction",
            "label": "nonces",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/lib/NativeMetaTransaction.sol:18"
          },
          {
            "contract": "RCAchievements",
            "label": "mintCount",
            "type": "t_uint256",
            "src": "../project:/contracts/nfthubs/RCAchievements.sol:60"
          },
          {
            "contract": "RCAchievements",
            "label": "achievementArray",
            "type": "t_array(t_struct(Achievement)30294_storage)dyn_storage",
            "src": "../project:/contracts/nfthubs/RCAchievements.sol:65"
          },
          {
            "contract": "RCAchievements",
            "label": "userAchievements",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "../project:/contracts/nfthubs/RCAchievements.sol:67"
          },
          {
            "contract": "RCAchievements",
            "label": "userEligable",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/contracts/nfthubs/RCAchievements.sol:70"
          },
          {
            "contract": "RCAchievements",
            "label": "splidgesSecret",
            "type": "t_uint256",
            "src": "../project:/contracts/nfthubs/RCAchievements.sol:70"
          },
          {
            "contract": "RCAchievements",
            "label": "marketTracker",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../project:/contracts/nfthubs/RCAchievements.sol:73"
          },
          {
            "contract": "RCAchievements",
            "label": "withdrawnTokens",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/nfthubs/RCAchievements.sol:83"
          },
          {
            "contract": "RCAchievements",
            "label": "alreadyClaimed",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "../project:/contracts/nfthubs/RCAchievements.sol:85"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(Achievement)30294_storage)dyn_storage": {
            "label": "struct RCAchievements.Achievement[]"
          },
          "t_struct(Achievement)30294_storage": {
            "label": "struct RCAchievements.Achievement",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "imageURI",
                "type": "t_string_storage"
              },
              {
                "label": "requirements",
                "type": "t_string_storage"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)309_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)309_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    }
  }
}
